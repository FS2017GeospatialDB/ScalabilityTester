//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

GeolocationService_getFeatures_args = function(args) {
  this.lBox = null;
  this.rBox = null;
  this.bBox = null;
  this.tBox = null;
  this.timestamp = null;
  if (args) {
    if (args.lBox !== undefined && args.lBox !== null) {
      this.lBox = args.lBox;
    }
    if (args.rBox !== undefined && args.rBox !== null) {
      this.rBox = args.rBox;
    }
    if (args.bBox !== undefined && args.bBox !== null) {
      this.bBox = args.bBox;
    }
    if (args.tBox !== undefined && args.tBox !== null) {
      this.tBox = args.tBox;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
GeolocationService_getFeatures_args.prototype = {};
GeolocationService_getFeatures_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lBox = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rBox = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.bBox = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.tBox = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GeolocationService_getFeatures_args.prototype.write = function(output) {
  output.writeStructBegin('GeolocationService_getFeatures_args');
  if (this.lBox !== null && this.lBox !== undefined) {
    output.writeFieldBegin('lBox', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.lBox);
    output.writeFieldEnd();
  }
  if (this.rBox !== null && this.rBox !== undefined) {
    output.writeFieldBegin('rBox', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.rBox);
    output.writeFieldEnd();
  }
  if (this.bBox !== null && this.bBox !== undefined) {
    output.writeFieldBegin('bBox', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.bBox);
    output.writeFieldEnd();
  }
  if (this.tBox !== null && this.tBox !== undefined) {
    output.writeFieldBegin('tBox', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.tBox);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GeolocationService_getFeatures_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Feature]);
    }
  }
};
GeolocationService_getFeatures_result.prototype = {};
GeolocationService_getFeatures_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Feature();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GeolocationService_getFeatures_result.prototype.write = function(output) {
  output.writeStructBegin('GeolocationService_getFeatures_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GeolocationService_getCell_args = function(args) {
  this.lat = null;
  this.lng = null;
  this.timestamp = null;
  if (args) {
    if (args.lat !== undefined && args.lat !== null) {
      this.lat = args.lat;
    }
    if (args.lng !== undefined && args.lng !== null) {
      this.lng = args.lng;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
GeolocationService_getCell_args.prototype = {};
GeolocationService_getCell_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lat = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lng = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GeolocationService_getCell_args.prototype.write = function(output) {
  output.writeStructBegin('GeolocationService_getCell_args');
  if (this.lat !== null && this.lat !== undefined) {
    output.writeFieldBegin('lat', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.lat);
    output.writeFieldEnd();
  }
  if (this.lng !== null && this.lng !== undefined) {
    output.writeFieldBegin('lng', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.lng);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GeolocationService_getCell_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Feature]);
    }
  }
};
GeolocationService_getCell_result.prototype = {};
GeolocationService_getCell_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new Feature();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GeolocationService_getCell_result.prototype.write = function(output) {
  output.writeStructBegin('GeolocationService_getCell_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GeolocationService_deleteFeature_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
GeolocationService_deleteFeature_args.prototype = {};
GeolocationService_deleteFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GeolocationService_deleteFeature_args.prototype.write = function(output) {
  output.writeStructBegin('GeolocationService_deleteFeature_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GeolocationService_deleteFeature_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
GeolocationService_deleteFeature_result.prototype = {};
GeolocationService_deleteFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GeolocationService_deleteFeature_result.prototype.write = function(output) {
  output.writeStructBegin('GeolocationService_deleteFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GeolocationService_updateFeature_args = function(args) {
  this.id = null;
  this.feature = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
  }
};
GeolocationService_updateFeature_args.prototype = {};
GeolocationService_updateFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GeolocationService_updateFeature_args.prototype.write = function(output) {
  output.writeStructBegin('GeolocationService_updateFeature_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 2);
    output.writeString(this.feature);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GeolocationService_updateFeature_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
GeolocationService_updateFeature_result.prototype = {};
GeolocationService_updateFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GeolocationService_updateFeature_result.prototype.write = function(output) {
  output.writeStructBegin('GeolocationService_updateFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GeolocationServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
GeolocationServiceClient.prototype = {};
GeolocationServiceClient.prototype.getFeatures = function(lBox, rBox, bBox, tBox, timestamp, callback) {
  this.send_getFeatures(lBox, rBox, bBox, tBox, timestamp, callback); 
  if (!callback) {
    return this.recv_getFeatures();
  }
};

GeolocationServiceClient.prototype.send_getFeatures = function(lBox, rBox, bBox, tBox, timestamp, callback) {
  this.output.writeMessageBegin('getFeatures', Thrift.MessageType.CALL, this.seqid);
  var args = new GeolocationService_getFeatures_args();
  args.lBox = lBox;
  args.rBox = rBox;
  args.bBox = bBox;
  args.tBox = tBox;
  args.timestamp = timestamp;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getFeatures();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

GeolocationServiceClient.prototype.recv_getFeatures = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new GeolocationService_getFeatures_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getFeatures failed: unknown result';
};
GeolocationServiceClient.prototype.getCell = function(lat, lng, timestamp, callback) {
  this.send_getCell(lat, lng, timestamp, callback); 
  if (!callback) {
    return this.recv_getCell();
  }
};

GeolocationServiceClient.prototype.send_getCell = function(lat, lng, timestamp, callback) {
  this.output.writeMessageBegin('getCell', Thrift.MessageType.CALL, this.seqid);
  var args = new GeolocationService_getCell_args();
  args.lat = lat;
  args.lng = lng;
  args.timestamp = timestamp;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getCell();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

GeolocationServiceClient.prototype.recv_getCell = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new GeolocationService_getCell_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getCell failed: unknown result';
};
GeolocationServiceClient.prototype.deleteFeature = function(id, callback) {
  this.send_deleteFeature(id, callback); 
  if (!callback) {
    return this.recv_deleteFeature();
  }
};

GeolocationServiceClient.prototype.send_deleteFeature = function(id, callback) {
  this.output.writeMessageBegin('deleteFeature', Thrift.MessageType.CALL, this.seqid);
  var args = new GeolocationService_deleteFeature_args();
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_deleteFeature();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

GeolocationServiceClient.prototype.recv_deleteFeature = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new GeolocationService_deleteFeature_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteFeature failed: unknown result';
};
GeolocationServiceClient.prototype.updateFeature = function(id, feature, callback) {
  this.send_updateFeature(id, feature, callback); 
  if (!callback) {
    return this.recv_updateFeature();
  }
};

GeolocationServiceClient.prototype.send_updateFeature = function(id, feature, callback) {
  this.output.writeMessageBegin('updateFeature', Thrift.MessageType.CALL, this.seqid);
  var args = new GeolocationService_updateFeature_args();
  args.id = id;
  args.feature = feature;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateFeature();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

GeolocationServiceClient.prototype.recv_updateFeature = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new GeolocationService_updateFeature_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateFeature failed: unknown result';
};
